// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.SteamworksBob319.subsystems;

import org.usfirst.frc319.SteamworksBob319.InstrumentationMotionMagic;
import org.usfirst.frc319.SteamworksBob319.Robot;
import org.usfirst.frc319.SteamworksBob319.RobotMap;
import org.usfirst.frc319.SteamworksBob319.commands.*;
import org.usfirst.frc319.SteamworksBob319.commands.GearCollector.GearCollectStopRetract;
import org.usfirst.frc319.SteamworksBob319.commands.GearCollector.GearCollectorArmMaintainPosition;
import org.usfirst.frc319.SteamworksBob319.commands.GearCollector.GearCollectorMotionMagicTestMode;
import org.usfirst.frc319.SteamworksBob319.commands.GearCollector.GearCollectorStop;
import org.usfirst.frc319.SteamworksBob319.commands.GearCollector.RetractCollectorThenStopCollect;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class gearCollector extends Subsystem {

  
    private final DoubleSolenoid gearPiston = RobotMap.gearCollectorGearPiston;
    private final CANTalon gearCollectorMotor = RobotMap.gearCollectorGearCollectorMotor;
    public final CANTalon gearCollectorArm = RobotMap.gearCollectorGearCollectorArm;
    private final DigitalInput GearSensor = RobotMap.gearCollectorSensor;
    private final Relay lights = RobotMap.lights;
    StringBuilder _sb = new StringBuilder();

public gearCollector (){
	gearCollectorMotor.changeControlMode(TalonControlMode.PercentVbus);
	gearCollectorArm.changeControlMode(TalonControlMode.MotionMagic);
	
	gearCollectorArm.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
	gearCollectorArm.reverseSensor(false);
	// _talon.configEncoderCodesPerRev(XXX), // if using
	// FeedbackDevice.QuadEncoder
	// _talon.configPotentiometerTurns(XXX), // if using
	// FeedbackDevice.AnalogEncoder or AnalogPot

	/* set the peak and nominal outputs, 12V means full */
	gearCollectorArm.configNominalOutputVoltage(+0.0f, -0.0f);
	gearCollectorArm.configPeakOutputVoltage(+12.0f, -12.0f);
	/* set closed loop gains in slot0 - see documentation */
	gearCollectorArm.setProfile(0);
	gearCollectorArm.setF(1.03);
	gearCollectorArm.setP(4); //.5 // ridiculously high but it never oscillated, error is almost 0
	gearCollectorArm.setI(0);
	gearCollectorArm.setD(0);
	/* set acceleration and vcruise velocity - see documentation */
	gearCollectorArm.setMotionMagicCruiseVelocity(108.75);//108.75 
	gearCollectorArm.setMotionMagicAcceleration(108.75);
	
	
}

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
       
    	//setDefaultCommand(new GearCollectStopRetract());
        //setDefaultCommand(new GearCollectorArmMaintainPosition());
        //setDefaultCommand(new GearCollectorMotionMagicTestMode());
    	setDefaultCommand(new GearCollectorStop());


        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void gearCollectorOut(double speed){
    	gearCollectorMotor.set(-speed);
    }
    public void gearCollectorIn(double speed){
    	gearCollectorMotor.set(speed);
    }
    public void gearCollectorStop(){
    	gearCollectorMotor.set(0);
    }
  
    public void gearCollectorGoToAngle(double degrees){
    	double revs = degrees/360.0;
    	gearCollectorArm.set(revs);
    }
    
    public double gearArmAngle(){
    	return gearCollectorArm.getPosition()*360.0;
    }
    
    public double getGearCollectorCurrent(){
    	return gearCollectorMotor.getOutputCurrent();
    }
    
    public boolean isArmAtSetpoint(double tolerance){
    	double position = gearCollectorArm.getPosition();
    	double setpoint = gearCollectorArm.getSetpoint();
    	double error = Math.abs(setpoint-position)*360.0;
    	if (error < Math.abs(tolerance))
    		return true;
    	else
    		return false;
    }
    
    public boolean gearCollectorHasExceededCurrent(double threshold){
    	if(getGearCollectorCurrent() > 2.5){
    		return true;
    	}
    	else return false;
    }
    
    public void gearCollectorRetract(){
    	gearCollectorArm.set(0);
    }
    
    public void gearCollectorMotionMagicTestMode() {
		/* get gamepad axis - forward stick is positive */
		double leftYstick = -0.5 * Robot.oi.operatorController.getAxis(AxisType.kY);
		/* calculate the percent motor output */
		double motorOutput = gearCollectorArm.getOutputVoltage() / gearCollectorArm.getBusVoltage();
		/* prepare line to print */
		_sb.append("\tout:");
		
		_sb.append(motorOutput);
		_sb.append("\tspd:");
		_sb.append(gearCollectorArm.getSpeed());

		if (Robot.oi.operatorController.getRawButton(1)) {
			/* Motion Magic */
			double targetPos = leftYstick
					* 0.2; /* .2 Rotations in either direction */ //dont break things
			gearCollectorArm.changeControlMode(TalonControlMode.MotionMagic);
			gearCollectorArm.set(targetPos); 

			/* append more signals to print when in speed mode. */
			_sb.append("\terr:");
			_sb.append(gearCollectorArm.getClosedLoopError());
			_sb.append("\ttrg:");
			_sb.append(targetPos);
		} else {
			/* Percent voltage mode */
			gearCollectorArm.changeControlMode(TalonControlMode.PercentVbus);
			gearCollectorArm.set(leftYstick);
		}
		/* instrumentation */
		InstrumentationMotionMagic.Process(gearCollectorArm, _sb);
	}
    public void lightsOn(){
    	lights.set(Relay.Value.kForward);
    }
    public void lightsOff(){
    	lights.set(Relay.Value.kOff);
    }
}

