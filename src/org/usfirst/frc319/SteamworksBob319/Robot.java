// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc319.SteamworksBob319;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoSource;

import org.omg.CORBA.portable.OutputStream;
import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc319.SteamworksBob319.commands.*;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.BlueCenterGearAuto;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.BlueGearAutoLeftSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.BlueGearAutoRightSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.BlueGearThenHopperAutoRightSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.BlueGearThenShootAutoLeftSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.BlueGearThenShootFromHopperAutoLeftSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.BlueHopperThenShootAutoLeftSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.BlueHopperAutoPt1;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.NorthShoreBlue;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.NorthShoreRed;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.DriveFiveFeetForward;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.GearOnlyAuto;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.RedCenterGearAuto;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.RedGearAutoLeftSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.CrossGreenLine;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.RedGearThenShootAutoRightSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.RedGearThenShootFromHopperAutoRightSide;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.RedHopperThenShootAutoRightSide;
import org.usfirst.frc319.SteamworksBob319.commands.DriveTrain.FollowTrajectory;
import org.usfirst.frc319.SteamworksBob319.commands.AutoModes.RedHopperAutoPt1;
import org.usfirst.frc319.SteamworksBob319.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;
	SendableChooser autoChooser;

	public static OI oi;

	public static driveTrain driveTrain;
	public static shooter shooter;
	public static fuelCollector fuelCollector;
	public static rollervator rollervator;
	public static gearCollector gearCollector;
	public static brakePad brakePad;
	// public static activeFloor activeFloor; // should be deleted (TG 2/15/17)
	public static compressor compressor;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();

		driveTrain = new driveTrain();
		shooter = new shooter();
		fuelCollector = new fuelCollector();
		rollervator = new rollervator();
		gearCollector = new gearCollector();
		brakePad = new brakePad();
		compressor = new compressor();
	
		
		
		
		//new Thread(()-> {
			UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
			//camera.setFPS(30);
			//camera.setResolution(320, 240);
			//camera.setExposureAuto();
			//camera.setBrightness(100);
			//camera.setExposureManual(6);//5 worked in shop
			
			
			
			
			//CvSink cvSink= CameraServer.getInstance().getVideo();
			//CvSource outputStream = CameraServer.getInstance().putVideo("FishEye", 640, 480);
			
			//Mat source = new Mat();
			//Mat output = new Mat();
			
		//	while(!Thread.interrupted()){
				
				//cvSink.grabFrame(source);
				//Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY); //COLOR_BGR2GRAY, CV_BLUR_NO_SCALE
				//outputStream.putFrame(source);
				
			//	try {
				//	Thread.sleep(100);
			//	} catch (InterruptedException e) {
					// TODO Auto-generated catch block
				//	e.printStackTrace();
				//}
		//	}	
		//}).start();
	//	CameraServer.getInstance().startAutomaticCapture();
		//CameraServer.getInstance().putVideo("fishface", 640, 480);

		autoChooser = new SendableChooser();
		autoChooser.addDefault("Default", new AutonomousCommand());
		//autoChooser.addObject("BlueHopperThenShootAutoLeftSide", new BlueHopperThenShootAutoLeftSide()); // good
		//autoChooser.addObject("BlueGearThenShootFromBoiler", new BlueGearThenShootAutoLeftSide()); // done 
		//autoChooser.addObject("Blue Right", new BlueGearThenHopperAutoRightSide()); // Has no motion profiles 
		autoChooser.addObject("Blue Left", new BlueHopperThenShootAutoLeftSide());
		autoChooser.addObject("Blue Right", new BlueGearAutoRightSide());
		autoChooser.addObject("Blue Center", new BlueCenterGearAuto());
		//autoChooser.addObject("GearOnlyAuto", new GearOnlyAuto());
		//autoChooser.addObject("RedHopperThenShootAutoRightSide", new RedHopperThenShootAutoRightSide());
		//autoChooser.addObject("RedGearThenShootAutoRightSide",new RedGearThenShootAutoRightSide()); // done
		autoChooser.addObject("Red Right", new RedHopperThenShootAutoRightSide());
		autoChooser.addObject("Red Left", new RedGearAutoLeftSide());
		autoChooser.addObject("Red Center", new RedCenterGearAuto());
		//autoChooser.addObject("DriveFiveFeetForward", new DriveFiveFeetForward());
		//autoChooser.addObject("BlueHopperAutopPt1", new BlueHopperAutoPt1());
		//autoChooser.addObject("RedHopperAutoPt1", new RedHopperAutoPt1());
		autoChooser.addObject("Follow Left Side Gear Trajectory", new FollowTrajectory("BlueGearAutoLeftSide"));
		autoChooser.addObject("CrossGreenLine", new CrossGreenLine());
	
		

		SmartDashboard.putData("Autonomus Command chooser", autoChooser);
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period

		
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
		Robot.rollervator.rollervatorStop();
		Robot.shooter.shooterStop();
		Robot.fuelCollector.fuelCollectorStop();
		SmartDashboard.putNumber("Gear Arm position", Robot.gearCollector.gearArmAngle());
		//Robot.gearCollector.updateArmPosition(); not working
	}

	public void autonomousInit() {
		Robot.brakePad.brakePadRetract();
		Robot.driveTrain.shiftDown();
		Robot.driveTrain.setDrivetrainProfileHighGear();
		autonomousCommand = (Command) autoChooser.getSelected();
		 //autonomousCommand = new RedGearThenShootAuto();

		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();

	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.putNumber("shooter speed", Robot.shooter.getShooterSpeed());
		SmartDashboard.putNumber("rollervator speed", Robot.rollervator.getRollervatorSpeed());
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		Robot.brakePad.brakePadRetract();
		//Robot.driveTrain.shiftUp();
		Robot.driveTrain.setDrivetrainProfileHighGear();
		//Robot.gearCollector.lightsOn();

		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.putNumber("shooter speed", Robot.shooter.getShooterSpeed());
		SmartDashboard.putNumber("rollervator speed", Robot.rollervator.getRollervatorSpeed());
		SmartDashboard.putNumber("left drivetrain velocity", Robot.driveTrain.getLeftDriveVelocity());
		SmartDashboard.putNumber("right drivetrain 'velocity", Robot.driveTrain.getRightDriveVelocity());
		SmartDashboard.putNumber("Gear Arm position", Robot.gearCollector.gearArmAngle());
		SmartDashboard.putNumber("RollerVator Test Mode motorspeed", Robot.rollervator.rollervatorLead.getSpeed());
		SmartDashboard.putNumber("motorspeed", Robot.shooter.shooterLead.getSpeed());
		SmartDashboard.putNumber("Collector Current", Robot.gearCollector.getGearCollectorCurrent());
		SmartDashboard.putNumber("gear collector voltage", Robot.gearCollector.getGearCollectorVoltage());
		SmartDashboard.putNumber("Rollervator Current", Robot.rollervator.getRollervatorCurrent());
		SmartDashboard.putNumber("Shooter Error", Robot.shooter.getShooterError());
		SmartDashboard.putBoolean("IsHighGear", Robot.driveTrain.isHighGear);
		SmartDashboard.putNumber("DT P value high gear = .3  low gear = 1", Robot.driveTrain.leftDriveLead.getP());
		SmartDashboard.putNumber("left Motor Setpoint = ", Robot.driveTrain.leftDriveLead.getSetpoint());
		SmartDashboard.putNumber("left drive train velocity error", Robot.driveTrain.leftdriveTrainError());
		SmartDashboard.putNumber("Right drive velocity error", Robot.driveTrain.rightdriveTrainError());
		SmartDashboard.putNumber("rollervator lead output voltage", Robot.rollervator.rollervatorLead.getOutputVoltage());
		SmartDashboard.putNumber("rollervator follow output voltage", Robot.rollervator.rollervatorFollow.getOutputVoltage());
		SmartDashboard.putNumber("Rollervator Lead Current", Robot.rollervator.getRollervatorCurrent());
		SmartDashboard.putNumber("rollervator follow current", Robot.rollervator.getRollerVatorFollowCurrent());
		SmartDashboard.putNumber("Rollervator Lead Voltage", Robot.rollervator.getRollervatorLeadVoltage());
		SmartDashboard.putNumber("rollervator follow Voltage", Robot.rollervator.getRollervatorFollowVoltage());
		SmartDashboard.putNumber("Shooter Current", Robot.shooter.getShooterCurrent());
		SmartDashboard.putNumber("Climber Current", Robot.rollervator.climberCurrent());
		SmartDashboard.putNumber("Climber Follow Current", Robot.rollervator.climberFollowCurrent());
		SmartDashboard.putNumber("Climber Lead Voltage", Robot.rollervator.climberLeadVoltage());
		SmartDashboard.putNumber("Climber Follow Voltage", Robot.rollervator.climberFollowVoltage());
		
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
