// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.SteamworksBob319.commands.DriveTrain;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc319.SteamworksBob319.LeftMotionProfile;
import org.usfirst.frc319.SteamworksBob319.RightMotionProfile;
import org.usfirst.frc319.SteamworksBob319.Robot;
import org.usfirst.frc319.SteamworksBob319.RobotMap;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

/**
 *
 */
public class FollowBothMotionProfiles extends Command {
	
	int loops = 0;
	boolean motionProfileStarted = true;
    
	LeftMotionProfile leftProfile;//= new LeftMotionProfile(RobotMap.driveTrainLeftDriveLead);
	RightMotionProfile rightProfile; // = new RightMotionProfile(RobotMap.driveTrainRightDriveLead);
	
    public FollowBothMotionProfiles(RightMotionProfile rightMotionProfile, LeftMotionProfile leftMotionProfile) {
    	//its not going to be a double, we are passing a variable.
        requires(Robot.driveTrain);
        this.leftProfile = leftMotionProfile;
        this.rightProfile = rightMotionProfile;

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.shiftDown();
    	loops = 0;
    	
    	rightProfile.reset();
    	leftProfile.reset();
    	
    	motionProfileStarted = true;
    	
    	System.out.println("initialized");
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	rightProfile.control();
    	leftProfile.control();
    	
    	RobotMap.driveTrainRightDriveLead.changeControlMode(TalonControlMode.MotionProfile);
    	RobotMap.driveTrainLeftDriveLead.changeControlMode(TalonControlMode.MotionProfile);
    	//Mr.Derrick thinks this should go in the initialize
    	
    	CANTalon.SetValueMotionProfile setRightOutput = rightProfile.getSetValue();
    	CANTalon.SetValueMotionProfile setLeftOutput = leftProfile.getSetValue();
    
    	RobotMap.driveTrainLeftDriveLead.set(setLeftOutput.value);
    	RobotMap.driveTrainRightDriveLead.set(setRightOutput.value);
    	
    	if(motionProfileStarted){
    		rightProfile.startMotionProfile();
    		leftProfile.startMotionProfile();
    		
    		motionProfileStarted = false;
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
       
    	if (rightProfile.getTimeoutCnt() >2 || leftProfile.getTimeoutCnt() >2){
        	return true;
        }
    	else if (rightProfile.isFinished()==true && leftProfile.isFinished()==true){
        	System.out.println("Command Finished");
        return true;
        }
        else{
        return false;
        }
    	
    	
    	
        }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("Ended");
    	
    RobotMap.driveTrainRightDriveLead.changeControlMode(TalonControlMode.PercentVbus);
    RobotMap.driveTrainLeftDriveLead.changeControlMode(TalonControlMode.PercentVbus);
    
     
    RobotMap.driveTrainRightDriveFollow.changeControlMode(TalonControlMode.Follower);
    RobotMap.driveTrainRightDriveFollow.set(RobotMap.driveTrainRightDriveLead.getDeviceID());
    RobotMap.driveTrainLeftDriveFollow.changeControlMode(TalonControlMode.Follower);
    RobotMap.driveTrainLeftDriveFollow.set(RobotMap.driveTrainLeftDriveLead.getDeviceID());
    //we think we don't need these lines for followers
    
    RobotMap.driveTrainLeftDriveLead.set(0);
    RobotMap.driveTrainRightDriveLead.set(0);
    
    rightProfile.reset();
    leftProfile.reset();
    
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	System.out.println("interrupted");
    }
}
