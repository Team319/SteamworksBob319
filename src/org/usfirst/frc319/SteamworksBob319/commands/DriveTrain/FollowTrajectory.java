// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.SteamworksBob319.commands.DriveTrain;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc319.SteamworksBob319.LeftMotionProfile;
import org.usfirst.frc319.SteamworksBob319.RightMotionProfile;
import org.usfirst.frc319.SteamworksBob319.Robot;
import org.usfirst.frc319.SteamworksBob319.RobotMap;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;
import com.team319.trajectory.SrxTrajectory;
import com.team319.trajectory.SrxTrajectoryImporter;
import com.team319.trajectory.SrxMotionProfileFollower;

/**
 *
 */
public class FollowTrajectory extends Command {
	
	int loops = 0;
	boolean motionProfileStarted = true;
	String trajectoryToFollow;
	
	SrxMotionProfileFollower leftFollower;
    SrxMotionProfileFollower rightFollower;
    
	//LeftMotionProfile leftProfile;//= new LeftMotionProfile(RobotMap.driveTrainLeftDriveLead);
	//RightMotionProfile rightProfile; // = new RightMotionProfile(RobotMap.driveTrainRightDriveLead);
    
    SrxTrajectory traj;
    SrxTrajectoryImporter importer = new SrxTrajectoryImporter("/home/lvuser");
	
    public FollowTrajectory(String trajectoryName) {
    	//its not going to be a double, we are passing a variable.
        requires(Robot.driveTrain);
        this.trajectoryToFollow = trajectoryName;
        
        

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.leftDriveLead.configPeakOutputVoltage(12.0f, -12.0f);
		Robot.driveTrain.rightDriveLead.configPeakOutputVoltage(12.0f, -12.0f);
    	//Robot.driveTrain.shiftDown();
		SmartDashboard.putString("Trajectory: ", "Importing " + trajectoryToFollow);
    	this.traj = importer.importSrxTrajectory(trajectoryToFollow);

		SmartDashboard.putString("Trajectory: ", "Finished Importing " + trajectoryToFollow);
    	System.out.println("Importing " + trajectoryToFollow);
    	
    	if (Robot.driveTrain.isHighGear){
    		this.leftFollower = new SrxMotionProfileFollower(RobotMap.driveTrainLeftDriveLead, Robot.driveTrain.HIGH_GEAR_PROFILE, this.traj.leftProfile);
    		this.rightFollower = new SrxMotionProfileFollower(RobotMap.driveTrainRightDriveLead, Robot.driveTrain.HIGH_GEAR_PROFILE, this.traj.rightProfile);
    	}
    	else {
    		this.leftFollower = new SrxMotionProfileFollower(RobotMap.driveTrainLeftDriveLead, Robot.driveTrain.LOW_GEAR_PROFILE, this.traj.leftProfile);
    		this.rightFollower = new SrxMotionProfileFollower(RobotMap.driveTrainRightDriveLead, Robot.driveTrain.LOW_GEAR_PROFILE, this.traj.rightProfile);
    	
    	} 	
    		
    	loops = 0;
    	
    	rightFollower.reset();
    	leftFollower.reset();
    	
    	motionProfileStarted = true;
    	
    	//System.out.println("Left num points: " + profile.leftProfile.numPoints);
    	System.out.println("initialized");
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//System.out.println(" P: " + Robot.driveTrain.leftDriveLead.getP()+ " I: " + Robot.driveTrain.leftDriveLead.getI()+ " D: " + Robot.driveTrain.leftDriveLead.getD()+ " F: " + Robot.driveTrain.leftDriveLead.getF());
    	
    	rightFollower.control();
    	leftFollower.control();
    	
    	RobotMap.driveTrainRightDriveLead.changeControlMode(TalonControlMode.MotionProfile);
    	RobotMap.driveTrainLeftDriveLead.changeControlMode(TalonControlMode.MotionProfile);
    	//Mr.Derrick thinks this should go in the initialize
    	
    	CANTalon.SetValueMotionProfile setRightOutput = rightFollower.getSetValue();
    	CANTalon.SetValueMotionProfile setLeftOutput = leftFollower.getSetValue();
    
    	RobotMap.driveTrainLeftDriveLead.set(setLeftOutput.value);
    	RobotMap.driveTrainRightDriveLead.set(setRightOutput.value);
    	
    	if(motionProfileStarted){
    		rightFollower.startMotionProfile();
    		leftFollower.startMotionProfile();
    		
    		motionProfileStarted = false;
    	}
    
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
       
    	if (rightFollower.getTimeoutCnt() >2 || leftFollower.getTimeoutCnt() >2){
        	return true;
        }
    	else if (rightFollower.isFinished()==true && leftFollower.isFinished()==true){
        	System.out.println("Command Finished");
        return true;
        }
        else{
        return false; 
        
        }	//this is the inserted bracket that it's asking for 1/31/2017 - Tim
     }	

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("Ended");
    	
    RobotMap.driveTrainRightDriveLead.changeControlMode(TalonControlMode.PercentVbus);
    RobotMap.driveTrainLeftDriveLead.changeControlMode(TalonControlMode.PercentVbus);
    
     
    RobotMap.driveTrainRightDriveFollow.changeControlMode(TalonControlMode.Follower);
    RobotMap.driveTrainRightDriveFollow.set(RobotMap.driveTrainRightDriveLead.getDeviceID());
    RobotMap.driveTrainLeftDriveFollow.changeControlMode(TalonControlMode.Follower);
    RobotMap.driveTrainLeftDriveFollow.set(RobotMap.driveTrainLeftDriveLead.getDeviceID());
    //we think we don't need these lines for followers
    
    RobotMap.driveTrainLeftDriveLead.set(0);
    RobotMap.driveTrainRightDriveLead.set(0);
    
    rightFollower.reset();
    leftFollower.reset();
    
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	System.out.println("interrupted");
    }
}
