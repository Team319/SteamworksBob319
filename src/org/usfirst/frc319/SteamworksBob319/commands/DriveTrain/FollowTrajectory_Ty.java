// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc319.SteamworksBob319.commands.DriveTrain;

import edu.wpi.first.wpilibj.Notifier;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc319.SteamworksBob319.Robot;
import org.usfirst.frc319.SteamworksBob319.RobotMap;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;
import com.team319.trajectory.SrxTrajectory;
import com.team319.trajectory.SrxTrajectoryImporter;
import com.team319.trajectory.SrxMotionProfile;

public class FollowTrajectory_Ty extends Command {

	private String trajectoryToFollow;
	private int kMinPointsInTalon = 5;

	private SrxTrajectory traj;
	private SrxTrajectoryImporter importer = new SrxTrajectoryImporter("/home/lvuser");

	private CANTalon.MotionProfileStatus rightStatus = new CANTalon.MotionProfileStatus();
	private CANTalon.MotionProfileStatus leftStatus = new CANTalon.MotionProfileStatus();

	/**
	 * this is only either Disable, Enable, or Hold. Since we'd never want one
	 * side to be enabled while the other is disabled, we'll use the same status
	 * for both sides.
	 */
	private CANTalon.SetValueMotionProfile setValue = CANTalon.SetValueMotionProfile.Disable;

	// periodically tells the SRXs to do the thing
	private class PeriodicRunnable implements java.lang.Runnable {
		public void run() {
			Robot.driveTrain.leftDriveLead.processMotionProfileBuffer();
			Robot.driveTrain.rightDriveLead.processMotionProfileBuffer();
		}
	}

	// Runs the runnable
	private Notifier SrxNotifier = new Notifier(new PeriodicRunnable());

	// constructor
	public FollowTrajectory_Ty(String trajectoryName) {
		requires(Robot.driveTrain);
		this.trajectoryToFollow = trajectoryName;
	}

	// Called just before this Command runs the first time
	protected void initialize() {

		setUpTalon(RobotMap.driveTrainRightDriveLead);
		setUpTalon(RobotMap.driveTrainLeftDriveLead);

		SrxNotifier.startPeriodic(.005);
		this.traj = importer.importSrxTrajectory(trajectoryToFollow);
		int pidfSlot = Robot.driveTrain.LOW_GEAR_PROFILE;

		if (Robot.driveTrain.isHighGear)
			pidfSlot = Robot.driveTrain.HIGH_GEAR_PROFILE;

		fillTalonBuffer(RobotMap.driveTrainRightDriveLead, this.traj.rightProfile, pidfSlot);
		fillTalonBuffer(RobotMap.driveTrainLeftDriveLead, this.traj.leftProfile, pidfSlot);

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {

		RobotMap.driveTrainRightDriveLead.getMotionProfileStatus(rightStatus);
		RobotMap.driveTrainLeftDriveLead.getMotionProfileStatus(leftStatus);

		if (rightStatus.isUnderrun || leftStatus.isUnderrun)
			// if either MP has underrun, stop both
			setValue = CANTalon.SetValueMotionProfile.Disable;
		else if (rightStatus.btmBufferCnt > kMinPointsInTalon && leftStatus.btmBufferCnt > kMinPointsInTalon)
			// if we have enough points in the talon, go.
			setValue = CANTalon.SetValueMotionProfile.Enable;
		else if (rightStatus.activePointValid && rightStatus.activePoint.isLastPoint && leftStatus.activePointValid
				&& leftStatus.activePoint.isLastPoint)
			// if both profiles are at their last points, hold the last point
			setValue = CANTalon.SetValueMotionProfile.Hold;
		else
			setValue = CANTalon.SetValueMotionProfile.Disable;

		RobotMap.driveTrainLeftDriveLead.set(setValue.value);
		RobotMap.driveTrainRightDriveLead.set(setValue.value);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {

		return rightStatus.activePointValid && rightStatus.activePoint.isLastPoint && leftStatus.activePointValid
				&& leftStatus.activePoint.isLastPoint;
	}

	// Called once after isFinished returns true
	protected void end() {
		SrxNotifier.stop();
		resetTalon(RobotMap.driveTrainRightDriveLead, TalonControlMode.PercentVbus, 0);
		resetTalon(RobotMap.driveTrainLeftDriveLead, TalonControlMode.PercentVbus, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		SrxNotifier.stop();
		resetTalon(RobotMap.driveTrainRightDriveLead, TalonControlMode.PercentVbus, 0);
		resetTalon(RobotMap.driveTrainLeftDriveLead, TalonControlMode.PercentVbus, 0);
	}	

	// set up the talon for motion profile control
	public void setUpTalon(CANTalon talon) {
		// make sure we have the full peak output voltage range
		talon.configPeakOutputVoltage(12.0f, -12.0f);
		talon.changeControlMode(TalonControlMode.MotionProfile);
		talon.clearMotionProfileTrajectories();
		talon.changeMotionControlFramePeriod(5);
	}

	// set the talon to the desired controlMode
	// used at the end of the motion profile
	public void resetTalon(CANTalon talon, TalonControlMode controlMode, double setValue) {
		talon.set(CANTalon.SetValueMotionProfile.Disable.value);
		talon.clearMotionProfileTrajectories();
		talon.changeControlMode(controlMode);
		talon.set(setValue);
	}

	// Send all the profile points to the talon object
	public void fillTalonBuffer(CANTalon talon, SrxMotionProfile prof, int pidfSlot) {
		CANTalon.TrajectoryPoint point = new CANTalon.TrajectoryPoint();

		for (int i = 0; i < prof.numPoints; ++i) {
			/* for each point, fill our structure and pass it to API */
			point.position = prof.points[i][0];
			point.velocity = prof.points[i][1];
			point.timeDurMs = (int) prof.points[i][2];
			point.profileSlotSelect = pidfSlot;
			point.velocityOnly = false;
			point.zeroPos = false;
			if (i == 0)
				point.zeroPos = true; /* set this to true on the first point */

			point.isLastPoint = false;
			if ((i + 1) == prof.numPoints)
				point.isLastPoint = true; /*
											 * set this to true on the last point
											 */

			talon.pushMotionProfileTrajectory(point);
		}
	}
}
